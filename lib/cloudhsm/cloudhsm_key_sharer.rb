require 'greenletters'
require 'io/console'

# In prod this script is run through the cloudhsm rake task which will run on a RamDisk
# Grants access to the key generated by cloudhsm_key_generator to the idp user
# Uses the saml key label and cached output from the generator (credentials/key handle)
# Outputs to file saml_<timestamp>.shr (a transcript of the cloudhsm interaction)

class CloudhsmKeySharer
  CLOUDHSM_MGMT_UTIL = \
    '/opt/cloudhsm/bin/cloudhsm_mgmt_util /opt/cloudhsm/etc/cloudhsm_mgmt_util.cfg'.freeze

  def initialize(saml_label)
    @saml_label = saml_label
    @username, @password, @key_handle, @idp_username = read_credentials_and_private_key_handle
    @kmu = run_cloudhsm_mgmt_util
    wait_for_command_to_finish
    enable_encrypted
  end

  def share_saml_key
    login_to_hsm
    idp_user_id = idp_user_id_from_list_users
    share_key(@key_handle, idp_user_id)
    exit_hsm
  end

  def cleanup
    File.delete("#{@saml_label}.shr")
  end

  private

  def read_credentials_and_private_key_handle
    File.read("#{@saml_label}.scr").to_s.chomp.split(':')
  end

  def run_cloudhsm_mgmt_util
    output = File.open("#{@saml_label}.shr", 'w')
    kmu = Greenletters::Process.new(CLOUDHSM_MGMT_UTIL, transcript: output)
    kmu.start!
    kmu
  end

  def enable_encrypted
    @kmu << "enable_e2e\n"
    wait_for_command_to_finish
  end

  def idp_user_id_from_list_users
    @kmu << "listUsers\n"
    user_id = nil
    @kmu.wait_for(:output, /\d+\s+CU\s+#{@idp_username}/) do |_process, matching|
      user_id = matching.matched.split[0]
    end
    wait_for_command_to_finish
    user_id
  end

  def share_key(key_handle, user_id)
    @kmu << "shareKey #{key_handle} #{user_id} 1\n"
    @kmu.wait_for(:output, /Do you want to continue/)
    @kmu << "y\n"
    @kmu.wait_for(:output, /success on server/)
    wait_for_command_to_finish
  end

  def login_to_hsm
    @kmu << "loginHSM CU #{@username} #{@password}\n"
    @kmu.wait_for(:output, /loginHSM success/)
    wait_for_command_to_finish
  end

  def exit_hsm
    @kmu << 'exit'
    Kernel.puts "Key shared with the idp user successfully\n" \
                "Transcript written to '#{@saml_label}.shr'.\n"
  end

  def wait_for_command_to_finish
    @kmu.wait_for(:output, /aws-cloudhsm>/)
  end
end

CloudhsmKeySharer.new(ARGV[0]).share_saml_key if $PROGRAM_NAME == __FILE__
