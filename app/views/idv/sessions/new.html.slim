- title @view_model.title

h1.h3 = @view_model.title

p = link_to t('links.access_help'),
  'https://login.gov/help/privacy-and-security/how-does-logingov-protect-my-data/'

= simple_form_for(@view_model.idv_form, url: idv_session_path,
    html: { autocomplete: 'off', method: :put, role: 'form' }) do |f|
  = f.error_notification
  fieldset.ml0.p0.border-none
    = f.input :first_name, label: t('idv.form.first_name'), required: true
    = f.input :last_name, label: t('idv.form.last_name'), required: true
    .clearfix.mxn1
      .sm-col.sm-col-6.px1
        / using :tel for mobile numeric keypad
        = f.input :dob, as: :tel,
          label: t('idv.form.dob'), required: true,
          hint: t('idv.form.dob_hint'), hint_html: { id: 'dob-instructs', class: 'mb1' },
          pattern: '(0[1-9]|1[012])/(0[1-9]|1[0-9]|2[0-9]|3[01])/[0-9]{4}',
          input_html: { class: 'dob',
            value: @view_model.idv_form.dob,
            'aria-describedby': 'dob-instructs' }
    .clearfix.mxn1
      .sm-col.sm-col-6.px1
        / using :tel for mobile numeric keypad
        = f.input :ssn, as: :tel,
          label: t('idv.form.ssn_label_html'), required: true,
          pattern: '^\d{3}-?\d{2}-?\d{4}$',
          input_html: { class: 'ssn', value: @view_model.idv_form.ssn }

  h2.h3 = t('idv.messages.sessions.id_information_subtitle')
  p = t('idv.messages.sessions.id_information_message')

  fieldset.m0.p0.border-none
    = f.label :state_id_type, label: t('idv.form.state_id_type_label'), class: 'bold',
        id: 'profile_state_id_type_label', required: true
    - state_id_types.each do |state_id_type|
      = f.label 'profile[state_id_type]', class: 'block mb1',
          for: "profile_state_id_type_#{state_id_type[1]}"
        .radio
          = radio_button_tag 'profile[state_id_type]', state_id_type[1],
            state_id_type[1] == 'drivers_license',
            'aria-labelledby': 'profile_state_id_type_label'
          span.indicator
          .block = state_id_type[0]
    = f.input :state_id_number, label: t('idv.form.state_id'), required: true
    = f.input :address1, label: t('idv.form.address1'), required: true
    = f.input :address2, label: t('idv.form.address2')
    = f.input :city, label: t('idv.form.city'), required: true

    .clearfix.mxn1
      .sm-col.sm-col-8.px1
        - if decorated_session.sp_name
          -sp_error = t('idv.errors.unsupported_jurisdiction_sp',
            sp_name: decorated_session.sp_name)
        -data_attrs = { "data-supported-jurisdictions": supported_jurisdictions,
          "data-error-message": t('idv.errors.unsupported_jurisdiction'),
          "data-error-message-sp": sp_error,\
        }
        - selected_state = @view_model.idv_form.state || @view_model.selected_state
        = f.input :state, collection: us_states_territories,
          label: t('idv.form.state'), required: true,
          input_html: data_attrs, selected: selected_state,
          prompt: '- Select -'

      .sm-col.sm-col-4.px1
        / using :tel for mobile numeric keypad
        = f.input :zipcode, as: :tel,
          label: t('idv.form.zipcode'), required: true,
          pattern: '(\d{5}([\-]\d{4})?)',
          input_html: { class: 'zipcode', value: @view_model.idv_form.zipcode }

  .mt3
    button type='submit' class='btn btn-primary btn-wide' = t('forms.buttons.continue')
= render 'shared/cancel', link: idv_cancel_path
= render @view_model.modal_partial, view_model: @view_model
